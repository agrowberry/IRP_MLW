import sympy as smp
import numpy as np
import plotly.graph_objects as go
import pandas as pd
from symfit import parameters, variables, sin, cos, Fit

N = 20

x = np.full(int(N / 2), 5)
x = np.append(x, np.linspace(5, 0, int(N / 2)))

y = np.linspace(0, 5, int(N / 2))
y = np.append(y, np.full(int(N / 2), 5))

a = 1

Num_Turns = 10

df = pd.DataFrame(x, columns=['x'], dtype='float')
df['y'] = y
df['x'] = x
df['z'] = np.linspace(0, a, num=N)

df['comp'] = df['x'] + df['y'] * 1j
df['r'] = np.absolute(df['comp'])
df['theta'] = np.angle(df['comp'])

blank_df = df.copy()

for i in range(Num_Turns * 4 - 1):
    new_df = blank_df.copy()
    new_df['z'] = new_df['z'] + (i + 1) * a
    new_df['theta'] = new_df['theta'] + (i + 1) * np.pi / 2
    df = df.append(new_df)

df = df.reset_index(drop=True)

df['x'] = df['r'] * np.cos(df['theta'])
df['y'] = df['r'] * np.sin(df['theta'])

df['z'] = df['z']


def fourier_series(x, f, n=0):
    """
    Returns a symbolic fourier series of order `n`.

    :param n: Order of the fourier series.
    :param x: Independent variable
    :param f: Frequency of the fourier series
    """
    # Make the parameter objects for all the terms
    a0, *cos_a = parameters(','.join(['a{}'.format(i) for i in range(0, n + 1)]))
    sin_b = parameters(','.join(['b{}'.format(i) for i in range(1, n + 1)]))
    # Construct the series
    series = a0 + sum(ai * cos(i * f * x) + bi * sin(i * f * x)
                      for i, (ai, bi) in enumerate(zip(cos_a, sin_b), start=1))
    return series


# build symbolic fourier series for 3 parametric fcns (x, y, z)
# stored as model dictionaries

x, y, z, t = variables('x, y, z, t')
w_x, w_y, w_z, = parameters('w_x, w_y, w_z')
x_model_dict = {x: fourier_series(t, f=w_x, n=64)}
y_model_dict = {y: fourier_series(t, f=w_y, n=64)}
z_model_dict = {z: fourier_series(t, f=w_z, n=64)}

df['t_z'] = np.linspace(0, 0.1 * Num_Turns, df.shape[0])
df['t_xy'] = np.linspace(0, 1000 * Num_Turns, df.shape[0])

# fit the three parameterised fcns to existing square spiral data
print('fitting x data...', end='\r')
x_fit = Fit(x_model_dict, t=np.asarray(df['t_xy']), x=np.asarray(df['x']))
x_fit_result = x_fit.execute()
print(x_fit_result)

print('fitting y data...', end='\r')
y_fit = Fit(y_model_dict, t=np.asarray(df['t_xy']), y=np.asarray(df['y']))
y_fit_result = y_fit.execute()
print(y_fit_result)

print('fitting z data...', end='\r')
z_fit = Fit(z_model_dict, t=np.asarray(df['t_z']), z=np.asarray(df['z']))
z_fit_result = z_fit.execute()
print(z_fit_result)

df['x fit'] = x_fit.model(t=df['t_xy'], **x_fit_result.params).output[0]
df['y fit'] = y_fit.model(t=df['t_xy'], **y_fit_result.params).output[0]
df['z fit'] = z_fit.model(t=df['t_z'], **z_fit_result.params).output[0]

fig = go.Figure()

fig.add_trace(go.Scatter3d(x=df['x'], y=df['y'], z=df['z'], mode='lines'))
fig.add_trace(go.Scatter3d(x=df['x fit'], y=df['y fit'], z=df['z fit'], mode='lines'))
